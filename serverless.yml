service: graphacademy-api

provider:
  name: aws
  runtime: python2.7
  timeout: 180
  environment: ${file(env.yml):${opt:stage}}
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:PutObject
      Resource: "arn:aws:s3:::graphacademy.neo4j.com/*"

plugins:
  - serverless-python-requirements

functions:
  set-quiz-status:
    name: ${opt:stage}-GraphAcademySetQuizStatus
    handler: handler.set_quiz_status
    role: 'arn:aws:iam::715633473519:role/lambda_graphacademy'
    events:
      - http:
          method: POST
          cors: true
          path: setQuizStatus
          authorizer: arn:aws:lambda:us-east-1:715633473519:function:Auth0JwtAuthorizor:GRAPHACADEMY

  get-quiz-status:
    name: ${opt:stage}-GraphAcademyGetQuizStatus
    handler: handler.get_quiz_status
    role: 'arn:aws:iam::715633473519:role/lambda_graphacademy'
    events:
      - http:
          method: GET
          cors: true
          path: getQuizStatus
          authorizer: arn:aws:lambda:us-east-1:715633473519:function:Auth0JwtAuthorizor:GRAPHACADEMY

  log-training-view:
    name: ${opt:stage}-GraphAcademyLogTrainingView
    handler: handler.log_training_view
    role: 'arn:aws:iam::715633473519:role/lambda_graphacademy'
    events:
      - http:
          method: POST
          cors: true
          path: logTrainingView
          authorizer: arn:aws:lambda:us-east-1:715633473519:function:Auth0JwtAuthorizor:GRAPHACADEMY

  set-class-enrollment:
    name: ${opt:stage}-GraphAcademySetClassEnrollment
    handler: handler.set_class_enrollment
    role: 'arn:aws:iam::715633473519:role/lambda_graphacademy'
    events:
      - http:
          method: POST
          cors: true
          path: setClassEnrollment
          authorizer: arn:aws:lambda:us-east-1:715633473519:function:Auth0JwtAuthorizor:GRAPHACADEMY

  gen-class-certificate:
    name: ${opt:stage}-GraphAcademyGenClassCertificate
    handler: handler.gen_class_certificate
    role: 'arn:aws:iam::715633473519:role/lambda_graphacademy'
    events:
      - http:
          method: POST
          cors: true
          path: genClassCertificate
          authorizer: arn:aws:lambda:us-east-1:715633473519:function:Auth0JwtAuthorizor:GRAPHACADEMY


  get-class-enrollment:
    name: ${opt:stage}-GraphAcademyGetClassEnrollment
    handler: handler.get_class_enrollment
    role: 'arn:aws:iam::715633473519:role/lambda_graphacademy'
    events:
      - http:
          method: GET
          cors: true
          path: getClassEnrollment
          authorizer: arn:aws:lambda:us-east-1:715633473519:function:Auth0JwtAuthorizor:GRAPHACADEMY


package:
  exclude:
    - node_modules/**
    - a/**


custom:
  pythonRequirements:
    dockerizePip: true
