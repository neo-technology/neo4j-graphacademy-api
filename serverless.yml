service: community-graphacademy

provider:
  name: aws
  runtime: python3.8
  timeout: 30
  memorySize: 2048
  stage: ${opt:stage, 'dev'}
  environment:
    DEPLOY_STAGE: ${self:provider.stage}
    NEO4J_URL: ${env:NEO4J_URL}
    NEO4J_USER: ${env:NEO4J_USER}
    NEO4J_PASS: ${env:NEO4J_PASS}
  iam:
    role:
      statements: # permissions for all of your functions can be set here
        - Effect: Allow
          Action:
            - s3:ListBucket
            - s3:PutObject
          Resource: "arn:aws:s3:::graphacademy.neo4j.com/*"
  lambdaHashingVersion: "20201221"
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: ${env:AUTH0_DOMAIN}
        audience:
          - ${env:AUTH0_AUDIENCE}
plugins:
  - serverless-python-requirements
  - serverless-offline

functions:
  set-quiz-status:
    name: ${self:provider.stage}-GraphAcademySetQuizStatus
    handler: handler.set_quiz_status
    role: 'arn:aws:iam::715633473519:role/lambda_graphacademy'
    events:
      - httpApi:
          method: POST
          cors: true
          path: /setQuizStatus
          authorizer: serviceAuthorizer
  get-quiz-status:
    name: ${self:provider.stage}-GraphAcademyGetQuizStatus
    handler: handler.get_quiz_status
    role: 'arn:aws:iam::715633473519:role/lambda_graphacademy'
    events:
      - http:
          method: GET
          cors: true
          path: /getQuizStatus
          authorizer: serviceAuthorizer

  send-emails:
    name: ${self:provider.stage}-GraphAcademySendEmails
    handler: handler.send_emails
    role: 'arn:aws:iam::715633473519:role/lambda_graphacademy'
    events:
     - schedule: rate(1 minute)

  log-training-view:
    name: ${self:provider.stage}-GraphAcademyLogTrainingView
    handler: handler.log_training_view
    role: 'arn:aws:iam::715633473519:role/lambda_graphacademy'
    events:
      - http:
          method: POST
          cors: true
          path: /logTrainingView
          authorizer: serviceAuthorizer

  set-class-enrollment:
    name: ${self:provider.stage}-GraphAcademySetClassEnrollment
    handler: handler.set_class_enrollment
    role: 'arn:aws:iam::715633473519:role/lambda_graphacademy'
    events:
      - http:
          method: POST
          cors: true
          path: /setClassEnrollment
          authorizer: serviceAuthorizer

  gen-class-certificate:
    name: ${self:provider.stage}-GraphAcademyGenClassCertificate
    handler: handler.gen_class_certificate
    role: 'arn:aws:iam::715633473519:role/lambda_graphacademy'
    events:
      - http:
          method: POST
          cors: true
          path: /genClassCertificate
          authorizer: serviceAuthorizer


  get-class-enrollment:
    name: ${self:provider.stage}-GraphAcademyGetClassEnrollment
    handler: handler.get_class_enrollment
    role: 'arn:aws:iam::715633473519:role/lambda_graphacademy'
    events:
      - http:
          method: GET
          cors: true
          path: /getClassEnrollment
          authorizer: serviceAuthorizer
  get-print-form:
    name: ${self:provider.stage}-GetPrintForm
    handler: print.get_print_form
    role: 'arn:aws:iam::715633473519:role/lambda_graphacademy'
    events:
      - http:
          method: GET
          cors: true
          path: /getPrintForm
          authorizer: serviceAuthorizer


package:
  patterns:
    - "!node_modules/**"
    - "!a/**"
    - "!venv/**"


custom:
  pythonRequirements:
    dockerizePip: true
